{"version":3,"sources":["services/api.js","components/Details/index.js","components/Summary/index.js","App.js","index.js"],"names":["api","axios","create","baseURL","Details","data","monthList","useState","startIdx","setStartIdx","confirmedPlotValues","setConfirmedPlotValues","activePlotValues","setActivePlotValues","recoveredPlotValues","setRecoveredPlotValues","deathPlotValues","setDeathPlotValues","confirmedData","slice","map","d","x","Date","parse","y","activeData","recoveredData","deathsData","className","length","xType","onMouseLeave","tickTotal","window","innerWidth","style","line","stroke","ticks","tickFormat","t","format","curve","color","opacity","strokeStyle","onNearestXY","value","date","dateString","getDate","getMonth","Confirmed","id","onClick","autoFocus","Summary","country","setData","useEffect","a","get","response","countries","filteredCountry","filter","c","fetchData","App","setCountries","searchTerm","setSearchTerm","detailedData","setDetailedData","countryList","sort","b","search","toISOString","width","height","fill","strokeWidth","strokeLinecap","cx","cy","r","x1","y1","x2","y2","onChange","e","target","key","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.07d2a2fb.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst api = axios.create({\n  baseURL: 'https://api.covid19api.com/'\n});\n\nexport default api;","import React, { useState } from 'react';\nimport { LineSeries, XAxis, FlexibleXYPlot, YAxis } from 'react-vis';\nimport { format } from 'd3-format';\n\nimport './Details.css';\n\nexport default function Details({ data }) {\n  const width = 500;\n  const height = 180;\n  const monthList = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December',\n  ];\n\n  const [startIdx, setStartIdx] = useState(0);\n  const [confirmedPlotValues, setConfirmedPlotValues] = useState({});\n  const [activePlotValues, setActivePlotValues] = useState({});\n  const [recoveredPlotValues, setRecoveredPlotValues] = useState({});\n  const [deathPlotValues, setDeathPlotValues] = useState({});\n\n  const confirmedData = data.slice(startIdx).map((d) => {\n    const date = Date.parse(d['Date']);\n    return { x: date, y: d['Confirmed'] };\n  });\n  const activeData = data.slice(startIdx).map((d) => {\n    const date = Date.parse(d['Date']);\n    return { x: date, y: d['Active'] };\n  });\n  const recoveredData = data.slice(startIdx).map((d) => {\n    const date = Date.parse(d['Date']);\n    return { x: date, y: d['Recovered'] };\n  });\n  const deathsData = data.slice(startIdx).map((d) => {\n    const date = Date.parse(d['Date']);\n    return { x: date, y: d['Deaths'] };\n  });\n\n  const confirmedNearestXYHandler = (value) => {\n    const date = new Date(value.x);\n    const dateString = `${date.getDate()} ${monthList[date.getMonth()]}`;\n    setConfirmedPlotValues({ Date: dateString, Confirmed: value.y });\n  };\n\n  const confirmedMouseLeaveHandler = () => setConfirmedPlotValues({});\n\n  const activeNearestXYHandler = (value) => {\n    const date = new Date(value.x);\n    const dateString = `${date.getDate()} ${monthList[date.getMonth()]}`;\n    setActivePlotValues({ Date: dateString, Confirmed: value.y });\n  };\n\n  const activeMouseLeaveHandler = () => setActivePlotValues({});\n\n  const recoveredNearestXYHandler = (value) => {\n    const date = new Date(value.x);\n    const dateString = `${date.getDate()} ${monthList[date.getMonth()]}`;\n    setRecoveredPlotValues({ Date: dateString, Confirmed: value.y });\n  };\n\n  const recoveredMouseLeaveHandler = () => setRecoveredPlotValues({});\n\n  const deathNearestXYHandler = (value) => {\n    const date = new Date(value.x);\n    const dateString = `${date.getDate()} ${monthList[date.getMonth()]}`;\n    setDeathPlotValues({ Date: dateString, Confirmed: value.y });\n  };\n\n  const deathMouseLeaveHandler = () => setDeathPlotValues({});\n\n  return (\n    <div className=\"details\">\n      {data.length !== 0 ? (\n        <>\n          <div className=\"graph graph--confirmed\">\n            <div className=\"stats\">\n              <p className=\"heading\">Confirmed</p>\n              <p className=\"x-value\">{confirmedPlotValues['Date']}</p>\n              <p className=\"y-value\">{confirmedPlotValues['Confirmed']}</p>\n            </div>\n            <FlexibleXYPlot\n              xType=\"time\"\n              onMouseLeave={confirmedMouseLeaveHandler}\n            >\n              <XAxis\n                tickTotal={window.innerWidth > 420 ? 7 : 4}\n                style={{\n                  line: { stroke: '#e90000' },\n                  ticks: { stroke: '#e90000b6' },\n                }}\n              />\n              <YAxis\n                tickTotal={window.innerWidth > 420 ? 5 : 3}\n                tickFormat={(t) => format('.2s')(t)}\n                style={{\n                  line: { stroke: '#e90000' },\n                  ticks: { stroke: '#e90000b6' },\n                }}\n              />\n              <LineSeries\n                curve={null}\n                color=\"#e90000b6\"\n                data={confirmedData}\n                opacity={1}\n                strokeStyle=\"solid\"\n                onNearestXY={confirmedNearestXYHandler}\n              />\n            </FlexibleXYPlot>\n          </div>\n          <div className=\"graph graph--active\">\n            <div className=\"stats\">\n              <p className=\"heading\">Active</p>\n              <p className=\"x-value\">{activePlotValues['Date']}</p>\n              <p className=\"y-value\">{activePlotValues['Confirmed']}</p>\n            </div>\n            <FlexibleXYPlot xType=\"time\" onMouseLeave={activeMouseLeaveHandler}>\n              <XAxis\n                tickTotal={window.innerWidth > 420 ? 7 : 4}\n                style={{\n                  line: { stroke: '#0075eb' },\n                  ticks: { stroke: '#0076ebb6' },\n                }}\n              />\n              <YAxis\n                tickTotal={window.innerWidth > 420 ? 5 : 3}\n                tickFormat={(t) => format('.2s')(t)}\n                style={{\n                  line: { stroke: '#0075eb' },\n                  ticks: { stroke: '#0076ebb6' },\n                }}\n              />\n              <LineSeries\n                curve={null}\n                color=\"#0075ebb6\"\n                data={activeData}\n                opacity={1}\n                strokeStyle=\"solid\"\n                onNearestXY={activeNearestXYHandler}\n              />\n            </FlexibleXYPlot>\n          </div>\n          <div className=\"graph graph--recovered\">\n            <div className=\"stats\">\n              <p className=\"heading\">Recovered</p>\n              <p className=\"x-value\">{recoveredPlotValues['Date']}</p>\n              <p className=\"y-value\">{recoveredPlotValues['Confirmed']}</p>\n            </div>\n            <FlexibleXYPlot\n              xType=\"time\"\n              onMouseLeave={recoveredMouseLeaveHandler}\n            >\n              <XAxis\n                tickTotal={window.innerWidth > 420 ? 7 : 4}\n                style={{\n                  line: { stroke: '#15b325' },\n                  ticks: { stroke: '#15b325b6' },\n                }}\n              />\n              <YAxis\n                tickTotal={window.innerWidth > 420 ? 5 : 3}\n                tickFormat={(t) => format('.2s')(t)}\n                style={{\n                  line: { stroke: '#15B325' },\n                  ticks: { stroke: '#15b325b6' },\n                }}\n              />\n              <LineSeries\n                curve={null}\n                color=\"#15B325b6\"\n                data={recoveredData}\n                opacity={1}\n                strokeStyle=\"solid\"\n                onNearestXY={recoveredNearestXYHandler}\n              />\n            </FlexibleXYPlot>\n          </div>\n          <div className=\"graph graph--deaths\">\n            <div className=\"stats\">\n              <p className=\"heading\">Deceased</p>\n              <p className=\"x-value\">{deathPlotValues['Date']}</p>\n              <p className=\"y-value\">{deathPlotValues['Confirmed']}</p>\n            </div>\n            <FlexibleXYPlot xType=\"time\" onMouseLeave={deathMouseLeaveHandler}>\n              <XAxis\n                tickTotal={window.innerWidth > 420 ? 7 : 4}\n                style={{\n                  line: { stroke: '#808080' },\n                  ticks: { stroke: '#868686b6' },\n                }}\n              />\n              <YAxis\n                tickTotal={window.innerWidth > 420 ? 5 : 3}\n                tickFormat={(t) => format('.2s')(t)}\n                style={{\n                  line: { stroke: '#808080' },\n                  ticks: { stroke: '#868686b6' },\n                }}\n              />\n              <LineSeries\n                curve={null}\n                color=\"#868686b6\"\n                data={deathsData}\n                opacity={1}\n                strokeStyle=\"solid\"\n                onNearestXY={deathNearestXYHandler}\n              />\n            </FlexibleXYPlot>\n          </div>\n        </>\n      ) : (\n        ''\n      )}\n      {data.length !== 0 ? (\n        <div className=\"buttons\">\n          <button id=\"all\" onClick={() => setStartIdx(0)} autoFocus>\n            All\n          </button>\n          <button\n            id=\"last3\"\n            onClick={() =>\n              setStartIdx(data.length - 90 >= 0 ? data.length - 90 : 0)\n            }\n          >\n            3 months\n          </button>\n          <button\n            id=\"last1\"\n            onClick={() =>\n              setStartIdx(data.length - 30 >= 0 ? data.length - 30 : 0)\n            }\n          >\n            1 month\n          </button>\n        </div>\n      ) : (\n        ''\n      )}\n    </div>\n  );\n}\n","import React, { useEffect, useState } from 'react';\n\nimport api from '../../services/api';\n\nimport './summary.css';\n\nexport default function Summary({ country }) {\n  const [data, setData] = useState({});\n\n  useEffect(() => {\n    const fetchData = async (country = '') => {\n      const response = await api.get('summary');\n      if (country) {\n        const countries = response.data['Countries'];\n        const filteredCountry = countries.filter((c) => c['Slug'] === country);\n        setData(filteredCountry[0]);\n      } else {\n        setData(response.data['Global']);\n      }\n    };\n    fetchData(country);\n  }, [country]);\n\n  return (\n    <div className=\"summary\">\n      <div className=\"card card--confirmed\">\n        <p className=\"heading\">Confirmed</p>\n        <p className=\"change\">\n          {data\n            ? data['NewConfirmed'] > 0\n              ? `+${data['NewConfirmed']}`\n              : ''\n            : ''}\n        </p>\n        <p className=\"total\">{data ? data['TotalConfirmed'] : 0}</p>\n      </div>\n      <div className=\"card card--active\">\n        <p className=\"heading\">Active</p>\n        <p className=\"change\">\n          {data\n            ? data['NewConfirmed'] - data['NewRecovered'] - data['NewDeaths'] >\n              0\n              ? `+${\n                  data['NewConfirmed'] -\n                  data['NewRecovered'] -\n                  data['NewDeaths']\n                }`\n              : ''\n            : ''}\n        </p>\n        <p className=\"total\">{data ? data['TotalConfirmed'] : 0}</p>\n      </div>\n      <div className=\"card card--recovered\">\n        <p className=\"heading\">Recovered</p>\n        <p className=\"change\">\n          {data\n            ? data['NewRecovered'] > 0\n              ? `+${data['NewRecovered']}`\n              : ''\n            : ''}\n        </p>\n        <p className=\"total\">{data ? data['TotalRecovered'] : 0}</p>\n      </div>\n      <div className=\"card card--deceased\">\n        <p className=\"heading\">Deceased</p>\n        <p className=\"change\">\n          {data ? (data['NewDeaths'] > 0 ? `+${data['NewDeaths']}` : '') : ''}\n        </p>\n        <p className=\"total\">{data ? data['TotalDeaths'] : 0}</p>\n      </div>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from 'react';\n\nimport api from './services/api';\nimport Details from './components/Details';\nimport Summary from './components/Summary';\n\nimport './App.css';\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [detailedData, setDetailedData] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await api.get('countries');\n      const countryList = response.data.sort(\n        (a, b) => b['Country'] - a['Country']\n      );\n      setCountries(countryList);\n    };\n\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    const fetchData = async (search) => {\n      if (search) {\n        const date = new Date().toISOString();\n        const response = await api.get(\n          `country/${search}?from=2020-03-01T00:00:00Z&to=${date}`\n        );\n        setDetailedData(response.data);\n      }\n    };\n\n    fetchData(searchTerm);\n  }, [searchTerm]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"search\">\n        <label>Search for your country</label>\n        <div className=\"search-input\">\n          <svg\n            width=\"30px\"\n            height=\"30px\"\n            fill=\"none\"\n            stroke=\"#868686b6\"\n            strokeWidth=\"2px\"\n            strokeLinecap=\"round\"\n          >\n            <circle cx=\"14px\" cy=\"14px\" r=\"10px\"></circle>\n            <line x1=\"26px\" y1=\"26px\" x2=\"21px\" y2=\"21px\"></line>\n          </svg>\n          <select\n            className=\"search-bar\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n          >\n            <option value=\"\">Select Country</option>\n            {countries.map((country) => (\n              <option key={country['ISO2']} value={country['Slug']}>\n                {country['Country']}\n              </option>\n            ))}\n          </select>\n        </div>\n      </div>\n      <Summary country={searchTerm} />\n      <Details data={detailedData} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}